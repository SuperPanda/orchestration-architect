# file: roles/storage/tasks/main.yml
# ========================================================
# AUTO-GENERATED FILE - DO NOT EDIT!
# This file is generated by an automated system.
# Any manual changes may be overwritten.
# ========================================================
# role: storage
# version: 0.8.1
---


# BEGIN ORCHESTRATION ARCHITECT MANAGED BLOCK 30_managed_block_before_content
# END ORCHESTRATION ARCHITECT MANAGED BLOCK 30_managed_block_before_content


# BEGIN ORCHESTRATION ARCHITECT MANAGED BLOCK 50_content_region_message
# END ORCHESTRATION ARCHITECT MANAGED BLOCK 50_content_region_message

- name: Display supplied arguments to storage when verbosity is set
  when: (ansible_verbosity | int)  > 1
  ansible.builtin.debug:
    msg: |
      storage: {{ storage | default('not set') }}
      storage_state: {{ storage_state | default('not set') }}
      storage_device: {{ storage_device | default('not set') }}
      storage_luks: {{ storage_luks | default('not set') }}
      storage_loop_device: {{ storage_loop_device | default('not set') }}
      storage_mount_table: {{ storage_mount_table | default('not set') }}
      storage_btrfs_subvolumes: {{ storage_btrfs_subvolumes | default('not set') }}
      storage_partition_table: {{ storage_partition_table | default('not set') }}
      storage_filesystem: {{ storage_filesystem | default('not set') }}
      
- debug:
    msg: |
      storage_params:
        state: "{{ (storage | default({})).state is defined | ternary(storage.state, storage_state | default(omit, true)) }}"
        device: "{{ (storage | default({})).device is defined | ternary(storage.device, storage_device | default(omit, true)) }}"
        luks: "{{ (storage | default({})).luks is defined | ternary(storage.luks, storage_luks | default(omit, true)) }}"
        loop_device: "{{ (storage | default({})).loop_device is defined | ternary(storage.loop_device, storage_loop_device | default(omit, true)) }}"
        mount_table: "{{ (storage | default({})).mount_table is defined | ternary(storage.mount_table, storage_mount_table | default(omit, true)) }}"
        btrfs_subvolumes: "{{ (storage | default({})).btrfs_subvolumes is defined | ternary(storage.btrfs_subvolumes, storage_btrfs_subvolumes | default(omit, true)) }}"
        partition_table: "{{ (storage | default({})).partition_table is defined | ternary(storage.partition_table, storage_partition_table | default(omit, true)) }}"
        filesystem: "{{ (storage | default({})).filesystem is defined | ternary(storage.filesystem, storage_filesystem | default(omit, true)) }}"
        
- name: Pass configuration parameters to the storage role
  vars:
    storage_params:
      state: "{{ (storage | default({})).state is defined | ternary(storage.state, storage_state | default(omit, true)) }}"
      device: "{{ (storage | default({})).device is defined | ternary(storage.device, storage_device | default(omit, true)) }}"
      luks: "{{ (storage | default({})).luks is defined | ternary(storage.luks, storage_luks | default(omit, true)) }}"
      loop_device: "{{ (storage | default({})).loop_device is defined | ternary(storage.loop_device, storage_loop_device | default(omit, true)) }}"
      mount_table: "{{ (storage | default({})).mount_table is defined | ternary(storage.mount_table, storage_mount_table | default(omit, true)) }}"
      btrfs_subvolumes: "{{ (storage | default({})).btrfs_subvolumes is defined | ternary(storage.btrfs_subvolumes, storage_btrfs_subvolumes | default(omit, true)) }}"
      partition_table: "{{ (storage | default({})).partition_table is defined | ternary(storage.partition_table, storage_partition_table | default(omit, true)) }}"
      filesystem: "{{ (storage | default({})).filesystem is defined | ternary(storage.filesystem, storage_filesystem | default(omit, true)) }}"
      
  ansible.builtin.include_tasks:
    file: "{{ (storage_params.state==omit) | ternary('info', storage_params.state) }}.yml"


# BEGIN ORCHESTRATION ARCHITECT MANAGED BLOCK 90_managed_block_after_content
# END ORCHESTRATION ARCHITECT MANAGED BLOCK 90_managed_block_after_content
