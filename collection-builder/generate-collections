#!/bin/bash

set -e

# Path to configuration file
CONFIG_FILE="collections.yml"
WORKSPACE_DIR="/root/orchestration_architect/dev/roles"  # Update this to your actual workspace directory
COLLECTIONS_BASE_DIR="/root/orchestration_architect/sandbox/collection-builder/collections"

# Function to parse YAML using awk
# This function assumes a simple flat YAML structure without nested maps or lists.
parse_yaml() {
  local yaml_file=$1
  awk -F': ' '/^(\s*-\s*|\s*$)/ {next;} {gsub(/:/, "-", $1); print $1 "=\"" $2 "\""}' $yaml_file
}

# Create collection structure
create_collection_structure() {
  local namespace=$1
  local collection=$2
  local base_dir="${COLLECTIONS_BASE_DIR}/${namespace}/${collection}"

  # Ensure base collection directories exist
  mkdir -p "${base_dir}/roles"

  # Create minimal meta/runtime.yml
  mkdir -p "${base_dir}/meta"
  echo "dependencies: {}" > "${base_dir}/meta/runtime.yml"
}

# Copy roles to the collection structure
copy_roles_to_collection() {
  local namespace=$1
  local collection=$2
  shift 2
  local roles=("$@")
  local base_dir="${COLLECTIONS_BASE_DIR}/${namespace}/${collection}"

  for role in "${roles[@]}"; do
    cp -r "${WORKSPACE_DIR}/${role}" "${base_dir}/roles/"
  done
}

main() {
  # Parse the configuration file
  eval "$(parse_yaml "${CONFIG_FILE}")"

  local namespace
  local collection
  local roles

  # Iterate through collections configurations
  while IFS= read -r line; do
    if [[ $line == collections* ]]; then
      namespace="${line#collections-}"
    elif [[ $line == roles* ]]; then
      roles=(${line#roles-})
    elif [[ $line != \ * ]]; then
      collection="${line}"
      # Create collection and copy roles
      create_collection_structure "$namespace" "$collection"
      copy_roles_to_collection "$namespace" "$collection" "${roles[@]}"
    fi
  done < <(parse_yaml "${CONFIG_FILE}")
}

main "$@"
