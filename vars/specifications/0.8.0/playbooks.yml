# vars/specifications/0.8.0/playbooks.yml
---
playbooks_specifications:
  # Start Metadata
  metadata:
    non_collection_keys: ['Base', 'metadata']
    collections:
      Meta:
        collection_name: Meta
        path: playbooks/Meta
        template_path: playbooks/meta.yml.j2
        description: "A collection of playbooks build, modify and extend Orchestration
          Architect, ensuring that the design of the system is consistent, managable,
          adheres to the underlying design principles and ensures compatability with
          different components and dynamically updating the interactions between components
          when designs change. Manages specifications, migrations, playbooks and roles."
      OA001_Provision_LiveUSB:
        collection_name: OA001_Provision_LiveUSB
        path: playbooks/OA001_Provision_LiveUSB
        files:
          - playbooks/OA001_Provision_LiveUSB/vars.yml
        description: "A collection of playbooks to build the portable management node
          of Orchestration Architect. Depends only on ansible and pacman as its dependency.
          If USB not available use a loop device. This collection can provision a LiveUSB
          environment with full disk encryption and persistence, open and mount LiveUSB,
          customize, modify and recover existing installations, and safely prepare device
          for ejection.
          Also allows for rekeying luks and root accounts (requires specification
          of a development luks keyfile or entering luks passphrase). Tested under default
          Arch Linux Installation Live Install media."
      OA001_LiveUSB:
        collection_name: OA001_LiveUSB
        description: "Contains playbooks to configure startup operations, customize
          the system, create snapshots and remote backups. Update subvolume or bind
          mounts, add/remove service accounts. It also includes the generation of the
          image fora live operating system of OA002_Hypervisor and deployment over PXE,
          which has a default auto login guest account, desktop environment, with baked
          SSH access for the OA001 root user and OA001_service worker, to allow instant
          access to deployed system."
        path: playbooks/OA001_LiveUSB
      OA002_Hypervisor:
        collection_name: OA002_Hypervisor
        path: playbooks/OA002_Hypervisor
        description: "Playbooks to remotely manage a bare metal nested hypervisor. Allows
          for instant reconfiguration from fresh boot of the live environment booted
          from the PXE service, and configuration of a running system that is persisted
          due to configuration running from playbook. Connects via SSH using credentials
          baked in."
      Default:
        collection_name: Default
        description: Playbooks not in a collection.
        path: playbooks/Default
  # End Metadata
  # Collections 
  Meta:
    Apply_Specifications:
      state: pristine
      playbook_name: Execute Meta Orchestrator to Process All Specifications
      playbook_path: Apply_Specifications.yml
      plays:
        - play_id: Apply_Specifications
          trigger_role:
            name: meta_orchestrator
            state: present

    Setup_Bootstrapped_Environment:
      state: updated
      playbook_name: Setup the Orchestration Architect Environment
      playbook_path: Setup_Bootstrapped_Environment.yml
      playbook_description: Setups the integration bootstrapped environment
      metadata:
        pre_run_playbooks:
          - Setup_Environment.yml
          - Setup_Managed_Repositories.yml



      
      # next version migrate it to 0.8.0/Setup.yml
#         metadata:
#           post_run_playbooks:
#             - "0.8.0/Setup.yml"
#       00_Environment:
#         playbook_name: Setup Environment
#         playbook_description: Adds vars/environment.yml and paths

        
#       01_Setup_Managed_Repositories:
#         playbook_name: Setup Managed Repository Server
#         playbook_path: 01_Setup_Managed_Repository.yml
#         playbook_description: Configures Managed Repositories
#         playbook_vars:
#           managed_repository_defaults:
#             path: /srv/git/orchestration_architect/
#             repositories:
#               repo_name: meta
#               repo_path: public/meta
#             repositories:
#             public: 
#               path: public/
#             private:
#               path: private/
#         plays:
#           # Prompt user for vars to add to vars files if not present
#           - play_id: 00_Initialize_Managed_Repository_Vars_File
#           - play_id: 01_Setup_Managed_Repository
#           - play_id: 02_Generate_Repositories_from_Configuration



#       Rel:
#         playbook_name: Build version 0.8.0 release candidate
#         playbook_path: build_release_candidate_0_8_0.yml
#         playbook_description: Generates the fixtures needed to seed the bootstrap process, and uses it to build the release, then validates that the release is able to repeat the process such that the output is identical.
#         metadata:
#           auto_generated: true
#           post_run_playbooks:
#             - 01_seed_fixtures.yml
#             - 02_bootstrap.yml
#             - 03_apply_hotfixes.yml
#   
#         playbook_vars:
#           meta_orchestrator_specifications_version: "0.8.0"
#         #playbook_vars:
#         #  base_path: /tmp/orchestration_architect/0.8.0/release/
#         sections:
#           - 00_prepare_environment
#         plays:
#           - play_id: 00_prepare_environment
#             play_tag: generate
#             play_vars:
#               meta_orchestrator_scope: params
#               meta_orchestrator_state: present
#               meta_orchestrator_specifications:
#                 playbooks:
#                   Meta:
#                     release_pipeline_version_0_8_0__00_prepare_environment:
#                       playbook_name: "Prepare Release Candidate Environment"
#                       playbook_description: "Generates the environment where the self-replicating
#                         environment will bootstrap itself."
#                       playbook_path: "release/0.8.0/00_prepare_release_candidate_environment.yml"
#               meta_orchestrator_operations: ['process_specifications', 'process_playbooks']
#           # Create the playbook that will seed the environment
#           # Create the playbook that run the process
#           # Create the playbook that verifies replication integrity
#   

  # Base Specification
  Base:
    playbook_vars_files:
      - ../../vars/environment.yml
    sections:
      - file_header
      - 30_managed_block_before_content
      - 50_content_region_message
      - 90_managed_block_after_content
#   
#             state: pristine
#             play_tasks:
#               - name: 
#                 trigger_role:
#                   name: meta_orchestrator
#                   state: present
#                   
#         
#         # EXAMPLE OF HOW IT CAN WORK
#         plays:
#           - play_id: generate_release_pipeline_playbooks
#             play_tag: generate
#             state: pristine
#             play_tasks:
#               - name: Load proposed meta_specification vars file
#                 load_vars_file:
#                   file: vars/proposed_meta_specifications.yml
#                   name: proposed_meta_specifications
#               - name: Check configuration
#                 trigger_role:
#                   name: meta_orchestrator
#                   meta_specifications_path: vars/specifications
#                   state: info
#           - play_id: set_default_specification
#             state: absent
#             play_tag: set_default
#             import_playbook: set_default_specifications_version
#           - play_id: add_version_control
#             state: absent
#             play_tag: version_control
