# file: playbooks/Sandbox/Temporary_Container_Experiment.yml
# playbook: Temporary Container Experiment
# version: 0.8.1
# description:
#   ==========================================
#   EXPERIMENT. Temporary Container Experiment
#   ==========================================
#
#   Scope
#   -----
#   Expand the category to allow instantiation
#   using device mapper to generate a deterministic
#   name for the loop device, adhereing to the
#   idiopotency requirement.
#
#   Requirements
#   ------------
#     - Setup Storage Pool Target with Storage Role
#     - Setup Volume Pool in a loop device
#       targetting a block device image,
#       defined by the `storage_loop_device_target` var
#     - Generate`*storage_loop_device_target*` that
#       assigns a `loop device` `target` a deterministic and predictable 
#       identity.
#     - Create a `loop_device` role in the `storage`  collection
#     - `*<LOOP_DEVICE_STATE>*`: `present` | `absent` | `info`
#     - Ensure `storage` adds functor structure details for `loop_device`
#     - Deploy a mount a btrfs subvolume in the ephemeral storage pool
#         in `tmpfs` (ram) in `nspawn`
#     - Take advantage of `copy-on-write` mechanisms,
#       to design composable overlays with `btrfs_subvolumes`
---
### 02_Managed_Region_Before_Content ORCHESTRATION ARCHITECT REGION ###

# Generated from playbook specifications metadata field 'pre_run_playbooks'
- ansible.builtin.import_playbook: "../Meta/Setup_Environment.yml"

### 03_Content_Region ORCHESTRATION ARCHITECT REGION ###



# -----
# Usage
# -----
# ```
# ansible-playbook playbooks/Sandbox/Temporary_Container_Experiment.yml
# ```
# Parameters:
#   -e "container_collection=OA999,container_name=Container,container_variant=Base"

- name: Prepare Ephemeral Container Environment
  hosts: localhost
  vars:
    container_version: "0.8.1"
    container_name: "Container"
    container_variant: "Base"
    container_parent: "Initial"
    container_collection: "OA999"
    container_label: "{{ container_collection }}_{{ container_name }}"
    container_params: &container
      name: "{{ container_name }}"
      parent: "{{ container_parent }}"
      variant: "{{ container_variant }}"
      version: "{{ container_version }}"
      collection: "{{ container_collection }}"
      size: 2G

    system_name:  "{{ [container_label, 'variant' | extract(container_params)] | join('-') }}"
    ephemeral_storage_pool_size: "3G"
    ephemeral_storage_pool_path: "/mnt/orchestration_architect/ephemeral"

    ephemeral_storage_pool: &storage_pool
      mount_table:
        - source: tmpfs
          options: "size={{ ephemeral_storage_pool_size }}"
          type: tmpfs
          target: "{{ ephemeral_storage_pool_path }}"

    container_volume_pool_name: "{{ container_label }}_Volume_Pool"
    container_volume_pool_image_path: "{{ [ephemeral_storage_pool_path, container_volume_pool_name + '.img'] | path_join }}"
    container_volume_pool_image_size: "2G"
    container_filesystem_name: "{{ container_label }}"
    container_volume_pool: &volume_pool
      loop_device:
        target: "{{ container_volume_pool_image_path }}" 
        map_name: "{{ container_volume_pool_name }}"
        size: "{{ container_volume_pool_image_size }}"
      device: "{{ [ '/dev/mapper', container_volume_pool_name ] | path_join }}"
      filesystem:
        path: "{{ ['/dev/mapper', container_volume_pool_name ] | path_join }}"
        label: "{{ container_volume_pool_name }}"
        type: btrfs        
        opts: "-n 16k"
      btrfs_subvolumes:
        fs_label: "{{ container_volume_pool_name }}"
        subvols:
          - "@Initial"
      mount_table:        
        - source: "LABEL={{ container_volume_pool_name }}"
          type: btrfs
          map:
            - source: "subvolid=5"
              target: "/mnt/{{ container_volume_pool_name }}"
  roles:
    - role: storage
      storage: "{{ ephemeral_storage_pool }}"
      storage_state: mounted
    - role: storage
      storage: "{{ container_volume_pool }}"
      storage_state: mounted
  tasks:
     - name: Display BTRFS Information
       ansible.builtin.include_role:
         name: btrfs_subvolumes
       vars:
         # State provided for clarity
         btrfs_subvolumes_state: info 

     - name: Copy @Initial to @Base for Container
       community.general.btrfs_subvolume:
         filesystem_label: "{{ container_volume_pool_name }}"
         name: "/@{{ system_name }}"
         snapshot_source: "/@Initial"
     - name: Mount @Base
       ansible.builtin.include_role:
         name: mount
       vars:
         mount:
           source: "LABEL={{ container_volume_pool_name }}"
           state: "mounted"
           type: "btrfs"
           map: 
             - source: "subvol=@{{ system_name }}"
               target: "/mnt/@{{ system_name }}"
     - name: Pac Strap Base
       ansible.builtin.command: "pacstrap -K /mnt/@{{ system_name }} base"
     - name: Start Container
       ansible.builtin.debug:
         msg: |
           Run `systemd-nspawn --ephemeral --directory=/mnt/@{{ system_name }}`
    
### 04_Managed_Region_After_Content ORCHESTRATION ARCHITECT REGION ###

# BEGIN ORCHESTRATION ARCHITECT MANAGED BLOCK 90_managed_block_after_content
# END ORCHESTRATION ARCHITECT MANAGED BLOCK 90_managed_block_after_content
